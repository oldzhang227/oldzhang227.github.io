<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>old张的Blog</title>
    <link>https://oldzhang227.github.io/</link>
    
    <atom:link href="https://oldzhang227.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>温故而知新，可以为师矣</description>
    <pubDate>Thu, 23 May 2024 06:45:52 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>C#中的字符串</title>
      <link>https://oldzhang227.github.io/2024/05/22/String/</link>
      <guid>https://oldzhang227.github.io/2024/05/22/String/</guid>
      <pubDate>Wed, 22 May 2024 07:05:11 GMT</pubDate>
      
      <description>&lt;p&gt;在任何编程语言中，字符串都是一个用的非常多的基础类型，在C#字符串的类 System.String ，直接继承自 System.Object ，是引用类型，因此字符串总是在堆上分配的内存，受到gc垃圾回收的管理，同时在C#中字符串是不可变的，一个字符串被修改后总是产生了的实例，而不是在原来的实例上的修改，了解这点非常重要。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>在任何编程语言中，字符串都是一个用的非常多的基础类型，在C#字符串的类 System.String ，直接继承自 System.Object ，是引用类型，因此字符串总是在堆上分配的内存，受到gc垃圾回收的管理，同时在C#中字符串是不可变的，一个字符串被修改后总是产生了的实例，而不是在原来的实例上的修改，了解这点非常重要。</p> <span id="more"></span><h5 id="1-字符串的相等性"><a href="#1-字符串的相等性" class="headerlink" title="1. 字符串的相等性"></a>1. 字符串的相等性</h5><p>示例1：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestStringEqual</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> s1 = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    <span class="built_in">string</span> s2 = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(s1 == s2)</span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;==&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;!=&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(s1.Equals(s2))</span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;Equals&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;Not Equals&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (System.Object.ReferenceEquals(s1, s2))</span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;ReferenceEquals&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;Not ReferenceEquals&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三种方法比较的结果都是相等的<br>通过dnspy打开mscorlib.dll，查看System.String的具体实现：</p><ol><li>&#x3D;&#x3D;<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="keyword">operator</span> ==(<span class="built_in">string</span> a, <span class="built_in">string</span> b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">string</span>.Equals(a, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>可以看到String重载了 &#x3D;&#x3D; 运算符，最终调用的还是string.Equals方法。</li><li>string.Equals<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">Equals</span>(<span class="params"><span class="built_in">string</span> a, <span class="built_in">string</span> b</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a == b || (a != <span class="literal">null</span> &amp;&amp; b != <span class="literal">null</span> &amp;&amp; <span class="built_in">string</span>.EqualsHelper(a, b));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>可以看到最终调用的是 string.EqualsHelper来判断的<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">unsafe</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">EqualsHelper</span>(<span class="params"><span class="built_in">string</span> strA, <span class="built_in">string</span> strB</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> i = strA.Length;</span><br><span class="line"><span class="keyword">if</span> (i != strB.Length)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">IntPtr intPtr2;</span><br><span class="line">IntPtr intPtr = intPtr2 = strA;</span><br><span class="line"><span class="keyword">if</span> (intPtr != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">intPtr2 = (IntPtr)((<span class="built_in">int</span>)intPtr + RuntimeHelpers.OffsetToStringData);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">char</span>* ptr = intPtr2;</span><br><span class="line">IntPtr intPtr4;</span><br><span class="line">IntPtr intPtr3 = intPtr4 = strB;</span><br><span class="line"><span class="keyword">if</span> (intPtr3 != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">intPtr4 = (IntPtr)((<span class="built_in">int</span>)intPtr3 + RuntimeHelpers.OffsetToStringData);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">char</span>* ptr2 = intPtr4;</span><br><span class="line"><span class="built_in">char</span>* ptr3 = ptr;</span><br><span class="line"><span class="built_in">char</span>* ptr4 = ptr2;</span><br><span class="line"><span class="keyword">while</span> (i &gt;= <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (*(<span class="built_in">int</span>*)ptr3 != *(<span class="built_in">int</span>*)ptr4 || *(<span class="built_in">int</span>*)(ptr3 + <span class="number">2</span>) != *(<span class="built_in">int</span>*)(ptr4 + <span class="number">2</span>) || *(<span class="built_in">int</span>*)(ptr3 + <span class="number">4</span>) != *(<span class="built_in">int</span>*)(ptr4 + <span class="number">4</span>) || *(<span class="built_in">int</span>*)(ptr3 + <span class="number">6</span>) != *(<span class="built_in">int</span>*)(ptr4 + <span class="number">6</span>) || *(<span class="built_in">int</span>*)(ptr3 + <span class="number">8</span>) != *(<span class="built_in">int</span>*)(ptr4 + <span class="number">8</span>))</span><br><span class="line">&#123;</span><br><span class="line">IL_A9:</span><br><span class="line"><span class="keyword">while</span> (i &gt; <span class="number">0</span> &amp;&amp; *(<span class="built_in">int</span>*)ptr3 == *(<span class="built_in">int</span>*)ptr4)</span><br><span class="line">&#123;</span><br><span class="line">ptr3 += <span class="number">2</span>;</span><br><span class="line">ptr4 += <span class="number">2</span>;</span><br><span class="line">i -= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> i &lt;= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">ptr3 += <span class="number">10</span>;</span><br><span class="line">ptr4 += <span class="number">10</span>;</span><br><span class="line">i -= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">goto</span> IL_A9;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>可以看出主要是按照int四字节对其来判断字符串内容是否相等的</li><li>System.Object.ReferenceEquals<br>顾名思义，比较的是对象的地址是否相等，是否指向的是用一个实例，对于代码中定义的字符串常量来说，是存储于元数据中的，因此引用的总是同一个实例，查看il代码即可看到：</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">.<span class="function">method <span class="keyword">private</span> hidebysig instance <span class="keyword">void</span>  <span class="title">TestString</span>() cil managed</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 代码大小       137 (0x89)</span></span><br><span class="line">  .maxstack  <span class="number">2</span></span><br><span class="line">  .<span class="function">locals <span class="title">init</span> (<span class="params"><span class="built_in">string</span> V_0,</span></span></span><br><span class="line"><span class="params"><span class="function">           <span class="built_in">string</span> V_1</span>)</span></span><br><span class="line"><span class="function">  IL_0000:  nop</span></span><br><span class="line"><span class="function">  IL_0001:  ldstr      &quot;hello world&quot;</span></span><br><span class="line"><span class="function">  IL_0006:  stloc.0</span></span><br><span class="line"><span class="function">  IL_0007:  ldstr      &quot;hello world&quot;</span></span><br><span class="line"><span class="function">  IL_000c:  stloc.1</span></span><br><span class="line"><span class="function">  IL_000d:  ldloc.0</span></span><br><span class="line"><span class="function">  IL_000e:  ldloc.1</span></span><br><span class="line"><span class="function">  IL_000f:  call       <span class="built_in">bool</span> [mscorlib]System.String::<span class="title">op_Equality</span>(<span class="params"><span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                                 <span class="built_in">string</span></span>)</span></span><br><span class="line"><span class="function">  IL_0014:  brfalse    IL_002a</span></span><br><span class="line"><span class="function">  IL_0019:  nop</span></span><br><span class="line"><span class="function">  IL_001a:  ldstr      &quot;</span>==<span class="string">&quot;</span></span><br><span class="line"><span class="string">  IL_001f:  call       void [UnityEngine.CoreModule]UnityEngine.Debug::Log(object)</span></span><br><span class="line"><span class="string">  IL_0024:  nop</span></span><br><span class="line"><span class="string">  IL_0025:  br         IL_0036</span></span><br><span class="line"><span class="string">  IL_002a:  nop</span></span><br><span class="line"><span class="string">  IL_002b:  ldstr      &quot;</span>!=<span class="string">&quot;</span></span><br><span class="line"><span class="string">  IL_0030:  call       void [UnityEngine.CoreModule]UnityEngine.Debug::Log(object)</span></span><br><span class="line"><span class="string">  IL_0035:  nop</span></span><br><span class="line"><span class="string">  IL_0036:  ldloc.0</span></span><br><span class="line"><span class="string">  IL_0037:  ldloc.1</span></span><br><span class="line"><span class="string">  IL_0038:  callvirt   instance bool [mscorlib]System.String::Equals(string)</span></span><br><span class="line"><span class="string">  IL_003d:  brfalse    IL_0053</span></span><br><span class="line"><span class="string">  IL_0042:  nop</span></span><br><span class="line"><span class="string">  IL_0043:  ldstr      &quot;</span>Equals<span class="string">&quot;</span></span><br><span class="line"><span class="string">  IL_0048:  call       void [UnityEngine.CoreModule]UnityEngine.Debug::Log(object)</span></span><br><span class="line"><span class="string">  IL_004d:  nop</span></span><br><span class="line"><span class="string">  IL_004e:  br         IL_005f</span></span><br><span class="line"><span class="string">  IL_0053:  nop</span></span><br><span class="line"><span class="string">  IL_0054:  ldstr      &quot;</span>Not Equals<span class="string">&quot;</span></span><br><span class="line"><span class="string">  IL_0059:  call       void [UnityEngine.CoreModule]UnityEngine.Debug::Log(object)</span></span><br><span class="line"><span class="string">  IL_005e:  nop</span></span><br><span class="line"><span class="string">  IL_005f:  ldloc.0</span></span><br><span class="line"><span class="string">  IL_0060:  ldloc.1</span></span><br><span class="line"><span class="string">  IL_0061:  call       bool [mscorlib]System.Object::ReferenceEquals(object,</span></span><br><span class="line"><span class="string">                                                                     object)</span></span><br><span class="line"><span class="string">  IL_0066:  brfalse    IL_007c</span></span><br><span class="line"><span class="string">  IL_006b:  nop</span></span><br><span class="line"><span class="string">  IL_006c:  ldstr      &quot;</span>ReferenceEquals<span class="string">&quot;</span></span><br><span class="line"><span class="string">  IL_0071:  call       void [UnityEngine.CoreModule]UnityEngine.Debug::Log(object)</span></span><br><span class="line"><span class="string">  IL_0076:  nop</span></span><br><span class="line"><span class="string">  IL_0077:  br         IL_0088</span></span><br><span class="line"><span class="string">  IL_007c:  nop</span></span><br><span class="line"><span class="string">  IL_007d:  ldstr      &quot;</span>Not ReferenceEquals<span class="string">&quot;</span></span><br><span class="line"><span class="string">  IL_0082:  call       void [UnityEngine.CoreModule]UnityEngine.Debug::Log(object)</span></span><br><span class="line"><span class="string">  IL_0087:  nop</span></span><br><span class="line"><span class="string">  IL_0088:  ret</span></span><br><span class="line"><span class="string">&#125; // end of method Test::TestString</span></span><br></pre></td></tr></table></figure><p>两个字符串变量的定义都是在元数据中加载的同一个字符串 </p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IL_0001:  ldstr      <span class="string">&quot;hello world&quot;</span></span><br><span class="line">IL_0006:  stloc<span class="number">.0</span></span><br><span class="line">IL_0007:  ldstr      <span class="string">&quot;hello world&quot;</span></span><br><span class="line">IL_000c:  stloc<span class="number">.1</span></span><br></pre></td></tr></table></figure><p>示例2：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestStringEqual2</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> s = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    <span class="built_in">string</span> s1 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="built_in">string</span> s2 = s.Substring(<span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">    <span class="keyword">if</span> (s1 == s2)</span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;==&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;!=&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (s1.Equals(s2))</span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;Equals&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;Not Equals&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (System.Object.ReferenceEquals(s1, s2))</span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;ReferenceEquals&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;Not ReferenceEquals&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：&#x3D;&#x3D;，Equals，Not ReferenceEquals</p><p>总结：&#x3D;&#x3D;，Equals，比较的是内容，ReferenceEquals比较的是实例的地址，而字符串是不可变的，在调用substring时会构建新的实例，而常量字符串定义时指向同一个实例</p><h5 id="2-string-Intern"><a href="#2-string-Intern" class="headerlink" title="2. string.Intern"></a>2. string.Intern</h5><p>在上个例子中，内存中复制同一个字符串的2个实例，因为字符串是“不可变”(immutable)的。在内存中只保留字符串的一个实例将显著提升内存的利用率。需要引用字符串的所有变量只需指向单独一个字符串对象。</p><p>为了避免同一个字符串多份实例的情况，在C#中可以通过string.Intern机制来实现，C#内部会维护一个字符串缓存池，键(key)是字符串，而值(value)是对托管堆中的String对象的引用，通过string.Intern方法，如果传入的字符串已经在缓存池中，直接返回缓存的实例，如果没有则加入到缓存池中。</p><p>示例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestStringIntern</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> s = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    <span class="built_in">string</span> s1 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="built_in">string</span> s2 = <span class="built_in">string</span>.Intern(s.Substring(<span class="number">0</span>, <span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (System.Object.ReferenceEquals(s1, s2))</span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;ReferenceEquals&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;Not ReferenceEquals&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：ReferenceEquals</p><p>注意：常量字符串会自动加入缓存池，加入缓存池的字符串不会被gc回收掉，因此注意使用环境，不可随意使用。</p><h5 id="3-字符串拼接"><a href="#3-字符串拼接" class="headerlink" title="3. 字符串拼接"></a>3. 字符串拼接</h5><ul><li>字符串相加<br>实际上调用的是拼接函数，string.Concat，注意有多个重载，非string类型的参数可能会发生装箱</li></ul><p>示例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestStringAdd</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Profiler.BeginSample(<span class="string">&quot;TestStringAdd&quot;</span>);</span><br><span class="line">    <span class="built_in">string</span> a = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        a = <span class="string">&quot;hello_&quot;</span> +  i + <span class="string">&quot;_world&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Profiler.EndSample();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过dnspy查看string源码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">Concat</span>(<span class="params"><span class="built_in">object</span> arg0, <span class="built_in">object</span> arg1, <span class="built_in">object</span> arg2</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (arg0 == <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">arg0 = <span class="built_in">string</span>.Empty;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (arg1 == <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">arg1 = <span class="built_in">string</span>.Empty;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (arg2 == <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">arg2 = <span class="built_in">string</span>.Empty;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arg0.ToString() + arg1.ToString() + arg2.ToString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">Concat</span>(<span class="params"><span class="built_in">string</span> str0, <span class="built_in">string</span> str1, <span class="built_in">string</span> str2</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (str0 == <span class="literal">null</span> &amp;&amp; str1 == <span class="literal">null</span> &amp;&amp; str2 == <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">string</span>.Empty;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (str0 == <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">str0 = <span class="built_in">string</span>.Empty;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (str1 == <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">str1 = <span class="built_in">string</span>.Empty;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (str2 == <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">str2 = <span class="built_in">string</span>.Empty;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">int</span> length = str0.Length + str1.Length + str2.Length;</span><br><span class="line"><span class="built_in">string</span> text = <span class="built_in">string</span>.FastAllocateString(length);</span><br><span class="line"><span class="built_in">string</span>.FillStringChecked(text, <span class="number">0</span>, str0);</span><br><span class="line"><span class="built_in">string</span>.FillStringChecked(text, str0.Length, str1);</span><br><span class="line"><span class="built_in">string</span>.FillStringChecked(text, str0.Length + str1.Length, str2);</span><br><span class="line"><span class="keyword">return</span> text;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出字符串相加的整体流程：</p><ol><li>首先调用用tostring方法，将参数转为string</li><li>计算总的字符串的长度，分配字符串</li><li>填充字符串</li></ol><ul><li>format</li></ul><p>通过dnspy查看string源码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">Format</span>(<span class="params"><span class="built_in">string</span> format, <span class="keyword">params</span> <span class="built_in">object</span>[] args</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">string</span>.Format(<span class="literal">null</span>, format, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">Format</span>(<span class="params">IFormatProvider provider, <span class="built_in">string</span> format, <span class="keyword">params</span> <span class="built_in">object</span>[] args</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (format == <span class="literal">null</span> || args == <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException((format == <span class="literal">null</span>) ? <span class="string">&quot;format&quot;</span> : <span class="string">&quot;args&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder(format.Length + args.Length * <span class="number">8</span>);</span><br><span class="line">stringBuilder.AppendFormat(provider, format, args);</span><br><span class="line"><span class="keyword">return</span> stringBuilder.ToString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出字符串格式化，是先创建个StringBuilder，最终还是用的StringBuilder的方法来实现的，不过每一次都要创建一个StringBuilder</p><ul><li>stringbuilder<br>通过内部创建了个固定大小的字符串，来处理字符串的拼接<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringBuilder</span>(<span class="params"><span class="built_in">int</span> capacity</span>)</span>;</span><br></pre></td></tr></table></figure>通过dnspy查看Append具体实现：<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> StringBuilder <span class="title">Append</span>(<span class="params"><span class="built_in">string</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">value</span> == <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> text = <span class="keyword">this</span>.m_StringValue;</span><br><span class="line">IntPtr intPtr = Thread.InternalGetCurrentThread();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.m_currentThread != intPtr)</span><br><span class="line">&#123;</span><br><span class="line">text = <span class="built_in">string</span>.GetStringForStringBuilder(text, text.Capacity);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">int</span> length = text.Length;</span><br><span class="line"><span class="built_in">int</span> requiredLength = length + <span class="keyword">value</span>.Length;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.NeedsAllocation(text, requiredLength))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">string</span> newString = <span class="keyword">this</span>.GetNewString(text, requiredLength);</span><br><span class="line">newString.AppendInPlace(<span class="keyword">value</span>, length);</span><br><span class="line"><span class="keyword">this</span>.ReplaceString(intPtr, newString);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">text.AppendInPlace(<span class="keyword">value</span>, length);</span><br><span class="line"><span class="keyword">this</span>.ReplaceString(intPtr, text);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>首先会判断缓存容量够不够，不够的话得扩容重新创建个字符串缓存，然后调用字符串的AppendInPlace，将目标字符串加到缓存字符串之后，这部分是通过unsafe，指针拷贝来实现的，如下：</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// String</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">internal</span> <span class="keyword">unsafe</span> <span class="keyword">void</span> <span class="title">AppendInPlace</span>(<span class="params"><span class="built_in">string</span> <span class="keyword">value</span>, <span class="built_in">int</span> currentLength</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> length = <span class="keyword">value</span>.Length;</span><br><span class="line"><span class="built_in">int</span> num = currentLength + length;</span><br><span class="line"><span class="keyword">fixed</span> (<span class="built_in">char</span>* ptr = &amp;<span class="keyword">this</span>.m_firstChar)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">fixed</span> (<span class="built_in">char</span>* ptr2 = &amp;<span class="keyword">value</span>.m_firstChar)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">string</span>.wstrcpy(ptr + currentLength, ptr2, length);</span><br><span class="line">&#125;</span><br><span class="line">ptr[num] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用StringBuilder注意：</p><ol><li>可以缓存一个公共的StringBuilder，避免多次创建</li><li>注意初始化StringBuilder的容量，尽量估算，避免扩容</li></ol><p><strong>总结：</strong></p><ol><li>简单且拼接次数少的，可直接用+或者string.format</li><li>复杂且频繁的注意使用公共的StringBuilder来处理</li></ol>]]></content:encoded>
      
      
      <category domain="https://oldzhang227.github.io/categories/C-%E5%9F%BA%E7%A1%80%E8%BF%9B%E9%98%B6/">C#基础进阶</category>
      
      
      <category domain="https://oldzhang227.github.io/tags/C/">C#</category>
      
      <category domain="https://oldzhang227.github.io/tags/string/">string</category>
      
      
      <comments>https://oldzhang227.github.io/2024/05/22/String/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://oldzhang227.github.io/2024/05/20/hello-world/</link>
      <guid>https://oldzhang227.github.io/2024/05/20/hello-world/</guid>
      <pubDate>Mon, 20 May 2024 07:12:25 GMT</pubDate>
      
      <description>&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.<br> <span id="more"></span></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content:encoded>
      
      
      
      
      <comments>https://oldzhang227.github.io/2024/05/20/hello-world/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
